name: Validate Changed Metadata on PR

on:
  pull_request:
    branches:
      - main

jobs:
  validate-deployment-on-develop-org:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}

    steps:
      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Read PR Body to detect test classes
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          echo "$PR_BODY" > ./pr_body.txt
          node ./parsePR.js
          TESTS=$(cat testsToRun.txt)
          echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV

      - name: Install Salesforce CLI (sf)
        run: |
          npm install --global @salesforce/cli
          sf version

      - name: Install Code Analyzer Plugin
        run: |
          sf plugins install code-analyzer

      - name: Authenticate with Salesforce (JWT)
        run: |
          echo "${{ secrets.SF_JWT_KEY }}" > server.key
          sf org login jwt \
            --client-id ${{ secrets.SF_CLIENT_ID }} \
            --jwt-key-file server.key \
            --username ${{ secrets.SF_HUB_USERNAME }} \
            --instance-url https://login.salesforce.com \
            --alias prod

      - name: Detect delta and generate destructiveChanges.xml
        run: |
          # Create necessary directories for changed sources and destructive changes
          mkdir -p changed-sources/force-app
          mkdir -p changed-sources/destructiveChanges
          
          echo '<?xml version="1.0" encoding="UTF-8"?>' > changed-sources/destructiveChanges/destructiveChanges.xml
          echo '<Package xmlns="http://soap.sforce.com/2006/04/metadata">' >> changed-sources/destructiveChanges/destructiveChanges.xml
          
          declare -A deleted_types
          
          # Loop over the files changed in the PR
          while IFS=$'\t' read -r status file; do
            [[ "$file" != force-app/* ]] && continue
          
            # Handle deleted files and generate the destructiveChanges.xml
            if [[ "$status" == "D" ]]; then
              base="${file##*/}"
              if [[ "$file" == *.cls ]]; then
                deleted_types["ApexClass"]+=$'\n        <members>'"${base%.cls}"'</members>'
              elif [[ "$file" == *.trigger ]]; then
                deleted_types["ApexTrigger"]+=$'\n        <members>'"${base%.trigger}"'</members>'
              elif [[ "$file" == *.object-meta.xml ]]; then
                deleted_types["CustomObject"]+=$'\n        <members>'"${base%.object-meta.xml}"'</members>'
              elif [[ "$file" == *.page ]]; then
                deleted_types["CustomPage"]+=$'\n        <members>'"${base%.page}"'</members>'
              elif [[ "$file" == *.page-meta.xml ]]; then
                deleted_types["CustomPage"]+=$'\n        <members>'"${base%.page-meta.xml}"'</members>'
              elif [[ "$file" == force-app/main/default/aura/*/* ]]; then
                # Handle Aura components (whole bundle)
                component_folder=$(echo "$file" | cut -d/ -f1-6)
                deleted_types["AuraComponent"]+=$'\n        <members>'"${component_folder}"'</members>'
              elif [[ "$file" == force-app/main/default/lwc/*/* ]]; then
                # Handle LWC components (whole bundle)
                component_folder=$(echo "$file" | cut -d/ -f1-6)
                deleted_types["LightningComponent"]+=$'\n        <members>'"${component_folder}"'</members>'
              fi
            else
              # Handle files that are modified or added (other than deletions)
              mkdir -p "changed-sources/$(dirname "$file")"
              cp "$file" "changed-sources/$file"
            fi
          done < <(git diff --name-status origin/main...HEAD)
          
          # Add deleted types to destructiveChanges.xml
          for key in "${!deleted_types[@]}"; do
            echo "  <types>" >> changed-sources/destructiveChanges/destructiveChanges.xml
            echo "${deleted_types[$key]}" >> changed-sources/destructiveChanges/destructiveChanges.xml
            echo "    <name>$key</name>" >> changed-sources/destructiveChanges/destructiveChanges.xml
            echo "  </types>" >> changed-sources/destructiveChanges/destructiveChanges.xml
          done
          
          # Closing the destructiveChanges.xml package
          echo "  <version>59.0</version>" >> changed-sources/destructiveChanges/destructiveChanges.xml
          echo "</Package>" >> changed-sources/destructiveChanges/destructiveChanges.xml

      - name: List files in changed-sources directory
        run: |
          echo "Listing files in changed-sources directory:"
          find changed-sources
          
      - name: Scan Apex Code
        run: |
          cd changed-sources
          sf code-analyzer run \
              --target './**/*.cls' \
              --rule-selector Recommended:Design \
              --rule-selector Recommended:BestPractices \
              --rule-selector Recommended:Performance \
              --output-file 'apexScanResults.html'
          cd ..

      - name: Validate delta (Run Specified Tests)
        if: ${{ env.APEX_TESTS != 'all' }}
        run: |
          sf project deploy validate \
            --source-dir "changed-sources/force-app" \
            --target-org prod \
            --test-level RunSpecifiedTests \
            --tests ${{ env.APEX_TESTS }} \
            --json

      - name: Validate delta (Run All Local Tests)
        if: ${{ env.APEX_TESTS == 'all' }}
        run: |
          sf project deploy validate \
            --source-dir "changed-sources/force-app" \
            --target-org prod \
            --test-level RunLocalTests \
            --json

      - name: Deploy destructive changes (if any)
        run: |
          echo "Listing files in changed-sources directory:"
          ls -R changed-sources
      
          # Check if destructiveChanges.xml exists and if there are files inside destructiveChanges
          if [ -f "changed-sources/destructiveChanges/destructiveChanges.xml" ] && [ "$(ls -A changed-sources/destructiveChanges)" ]; then
            echo "Destructive changes detected. Deploying..."
            sf project deploy validate \
              --source-dir "changed-sources/force-app" \
              --post-destructive-changes "changed-sources/destructiveChanges/destructiveChanges.xml" \
              --target-org prod \
              --test-level RunLocalTests \
              --ignore-warnings \
              --json
          else
            echo "No destructive changes detected. Skipping deployment."
          fi
